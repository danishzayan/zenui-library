import { useState, useEffect } from 'react';

// react icons
import { RiShiningFill } from "react-icons/ri";

// ai api
import { generateTailwindConfig } from "../APIs/genaiAPI";

// response sidebar
import AIResponseSidebar from './AIResponseSidebar';

// framer motion
import {AnimatePresence, motion} from "framer-motion";

const Generator = () => {
  const [prompt, setPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState('');
  const [inputError, setInputError] = useState('');
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [codes, setCodes] = useState('');
  const [placeholderIndex, setPlaceholderIndex] = useState(0);
  const [typingText, setTypingText] = useState('');

  const placeholders = [
    "E-Commerce Website",
    "Modern Blog Website",
    "Developer Portfolio Website",
    "Agency Dashboard"
  ];

  useEffect(() => {
    let currentText = '';
    let currentIndex = 0;
    let typingInterval;
    let currentPlaceholder = placeholders[placeholderIndex];

    const typeText = () => {
      if (currentIndex < currentPlaceholder.length) {
        currentText += currentPlaceholder[currentIndex];
        setTypingText(currentText);
        currentIndex++;
      } else {
        clearInterval(typingInterval);
        setTimeout(() => {
          // Start erasing after 2 seconds
          startErasing();
        }, 2000);
      }
    };

    const startErasing = () => {
      currentIndex = currentText.length;
      typingInterval = setInterval(() => {
        if (currentIndex > 0) {
          currentText = currentText.slice(0, -1);
          setTypingText(currentText);
          currentIndex--;
        } else {
          clearInterval(typingInterval);
          setPlaceholderIndex((prev) => (prev + 1) % placeholders.length);
        }
      }, 50);
    };

    typingInterval = setInterval(typeText, 100);

    return () => {
      clearInterval(typingInterval);
    };
  }, [placeholderIndex]);

  const handleGenerateConfig = async () => {
    if (!prompt.trim()) {
      setInputError('Please enter a theme name for project.');
      return;
    }

    try {
      setInputError('');
      setError('');
      setIsGenerating(true);
      setSidebarOpen(true);

      const generatedConfig = await generateTailwindConfig(prompt);
      
      const currentDate = new Date().toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });

      // Add header comment and clean markdown
      const formattedCode = `
/**
* Generated by @ZenUI Library
* Date: ${currentDate}
*/

      ${generatedConfig.replace(/```javascript/g, '').replace(/```/g, '').trim()}
      `;
      
      setCodes(formattedCode);
      setPrompt('');

    } catch (err) {
      setError('Failed to generate config. Please try again.');
      setSidebarOpen(false);
      setCodes('');
    } finally {
      setIsGenerating(false);
    }
  };

return (
  <div className='w-full'>
    <div className='relative'>
      <label
        htmlFor='manual-input'
        className='text-[1rem] font-semibold text-gray-700 '
      >
        Write the project name
      </label>{" "}
      <br />
      <input
        id='manual-input'
        type='text'
        value={prompt}
        onChange={(e) => setPrompt(e.target.value)}
        className='py-2 px-4 w-full bg-transparent rounded-md border border-gray-300 mt-1.5 outline-none focus:ring-0 focus:border-[#0FABCA] text-gray-800'
      />
      <AnimatePresence>
        {!prompt && (
            <motion.span
                initial={{ opacity: 0 }}
                animate={{ opacity: 0.5 }}
                exit={{ opacity: 0 }}
                className="absolute left-4 top-[50%] transform -translate-y-[-15%] text-gray-600 pointer-events-none"
            >
              {typingText}
              <motion.span
                  animate={{ opacity: [0, 1, 0] }}
                  transition={{ duration: 0.8, repeat: Infinity }}
              >
                |
              </motion.span>
            </motion.span>
        )}
      </AnimatePresence>
      {inputError && (
        <div className='text-red-500 text-sm mt-1'>{inputError}</div>
      )}
    </div>

    <div className='flex items-center gap-[15px] mt-7'>
      <button
        onClick={handleGenerateConfig}
        className='flex items-center gap-[8px] code_generate_btn bg-gradient-to-r from-[#0FABCA] hover:from-[#0FABCA]/80 to-[#CD00F1] hover:to-[#CD00F1]/80 text-white py-2.5 px-6 rounded-md'
        disabled={isGenerating}
      >
        <RiShiningFill className={isGenerating ? "animate-spin-zoom" : ""} />{" "}
        {isGenerating ? "Generating..." : "Generate Config"}
      </button>
    </div>
    {error && <div className='text-red-500 mt-2'>{error}</div>}

    <AIResponseSidebar
      sidebarOpen={sidebarOpen}
      setSidebarOpen={setSidebarOpen}
      codes={codes}
      isGenerating={isGenerating}
    />
  </div>
);
};

export default Generator;